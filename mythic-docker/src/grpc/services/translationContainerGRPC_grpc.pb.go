// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: translationContainerGRPC.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TranslationContainerClient is the client API for TranslationContainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslationContainerClient interface {
	// rpc function(messageFromClient) messageToClient
	// all of these functions start off by sending messageToClient and getting the result back
	TranslateFromCustomTotigerFormat(ctx context.Context, opts ...grpc.CallOption) (TranslationContainer_TranslateFromCustomTotigerFormatClient, error)
	TranslateFromtigerToCustomFormat(ctx context.Context, opts ...grpc.CallOption) (TranslationContainer_TranslateFromtigerToCustomFormatClient, error)
	GenerateEncryptionKeys(ctx context.Context, opts ...grpc.CallOption) (TranslationContainer_GenerateEncryptionKeysClient, error)
}

type translationContainerClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslationContainerClient(cc grpc.ClientConnInterface) TranslationContainerClient {
	return &translationContainerClient{cc}
}

func (c *translationContainerClient) TranslateFromCustomTotigerFormat(ctx context.Context, opts ...grpc.CallOption) (TranslationContainer_TranslateFromCustomTotigerFormatClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranslationContainer_ServiceDesc.Streams[0], "/translationContainerServices.TranslationContainer/TranslateFromCustomTotigerFormat", opts...)
	if err != nil {
		return nil, err
	}
	x := &translationContainerTranslateFromCustomTotigerFormatClient{stream}
	return x, nil
}

type TranslationContainer_TranslateFromCustomTotigerFormatClient interface {
	Send(*TrCustomMessageTotigerC2FormatMessageResponse) error
	Recv() (*TrCustomMessageTotigerC2FormatMessage, error)
	grpc.ClientStream
}

type translationContainerTranslateFromCustomTotigerFormatClient struct {
	grpc.ClientStream
}

func (x *translationContainerTranslateFromCustomTotigerFormatClient) Send(m *TrCustomMessageTotigerC2FormatMessageResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *translationContainerTranslateFromCustomTotigerFormatClient) Recv() (*TrCustomMessageTotigerC2FormatMessage, error) {
	m := new(TrCustomMessageTotigerC2FormatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *translationContainerClient) TranslateFromtigerToCustomFormat(ctx context.Context, opts ...grpc.CallOption) (TranslationContainer_TranslateFromtigerToCustomFormatClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranslationContainer_ServiceDesc.Streams[1], "/translationContainerServices.TranslationContainer/TranslateFromtigerToCustomFormat", opts...)
	if err != nil {
		return nil, err
	}
	x := &translationContainerTranslateFromtigerToCustomFormatClient{stream}
	return x, nil
}

type TranslationContainer_TranslateFromtigerToCustomFormatClient interface {
	Send(*TrtigerC2ToCustomMessageFormatMessageResponse) error
	Recv() (*TrtigerC2ToCustomMessageFormatMessage, error)
	grpc.ClientStream
}

type translationContainerTranslateFromtigerToCustomFormatClient struct {
	grpc.ClientStream
}

func (x *translationContainerTranslateFromtigerToCustomFormatClient) Send(m *TrtigerC2ToCustomMessageFormatMessageResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *translationContainerTranslateFromtigerToCustomFormatClient) Recv() (*TrtigerC2ToCustomMessageFormatMessage, error) {
	m := new(TrtigerC2ToCustomMessageFormatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *translationContainerClient) GenerateEncryptionKeys(ctx context.Context, opts ...grpc.CallOption) (TranslationContainer_GenerateEncryptionKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranslationContainer_ServiceDesc.Streams[2], "/translationContainerServices.TranslationContainer/GenerateEncryptionKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &translationContainerGenerateEncryptionKeysClient{stream}
	return x, nil
}

type TranslationContainer_GenerateEncryptionKeysClient interface {
	Send(*TrGenerateEncryptionKeysMessageResponse) error
	Recv() (*TrGenerateEncryptionKeysMessage, error)
	grpc.ClientStream
}

type translationContainerGenerateEncryptionKeysClient struct {
	grpc.ClientStream
}

func (x *translationContainerGenerateEncryptionKeysClient) Send(m *TrGenerateEncryptionKeysMessageResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *translationContainerGenerateEncryptionKeysClient) Recv() (*TrGenerateEncryptionKeysMessage, error) {
	m := new(TrGenerateEncryptionKeysMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranslationContainerServer is the server API for TranslationContainer service.
// All implementations must embed UnimplementedTranslationContainerServer
// for forward compatibility
type TranslationContainerServer interface {
	// rpc function(messageFromClient) messageToClient
	// all of these functions start off by sending messageToClient and getting the result back
	TranslateFromCustomTotigerFormat(TranslationContainer_TranslateFromCustomTotigerFormatServer) error
	TranslateFromtigerToCustomFormat(TranslationContainer_TranslateFromtigerToCustomFormatServer) error
	GenerateEncryptionKeys(TranslationContainer_GenerateEncryptionKeysServer) error
	mustEmbedUnimplementedTranslationContainerServer()
}

// UnimplementedTranslationContainerServer must be embedded to have forward compatible implementations.
type UnimplementedTranslationContainerServer struct {
}

func (UnimplementedTranslationContainerServer) TranslateFromCustomTotigerFormat(TranslationContainer_TranslateFromCustomTotigerFormatServer) error {
	return status.Errorf(codes.Unimplemented, "method TranslateFromCustomTotigerFormat not implemented")
}
func (UnimplementedTranslationContainerServer) TranslateFromtigerToCustomFormat(TranslationContainer_TranslateFromtigerToCustomFormatServer) error {
	return status.Errorf(codes.Unimplemented, "method TranslateFromtigerToCustomFormat not implemented")
}
func (UnimplementedTranslationContainerServer) GenerateEncryptionKeys(TranslationContainer_GenerateEncryptionKeysServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateEncryptionKeys not implemented")
}
func (UnimplementedTranslationContainerServer) mustEmbedUnimplementedTranslationContainerServer() {}

// UnsafeTranslationContainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslationContainerServer will
// result in compilation errors.
type UnsafeTranslationContainerServer interface {
	mustEmbedUnimplementedTranslationContainerServer()
}

func RegisterTranslationContainerServer(s grpc.ServiceRegistrar, srv TranslationContainerServer) {
	s.RegisterService(&TranslationContainer_ServiceDesc, srv)
}

func _TranslationContainer_TranslateFromCustomTotigerFormat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranslationContainerServer).TranslateFromCustomTotigerFormat(&translationContainerTranslateFromCustomTotigerFormatServer{stream})
}

type TranslationContainer_TranslateFromCustomTotigerFormatServer interface {
	Send(*TrCustomMessageTotigerC2FormatMessage) error
	Recv() (*TrCustomMessageTotigerC2FormatMessageResponse, error)
	grpc.ServerStream
}

type translationContainerTranslateFromCustomTotigerFormatServer struct {
	grpc.ServerStream
}

func (x *translationContainerTranslateFromCustomTotigerFormatServer) Send(m *TrCustomMessageTotigerC2FormatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *translationContainerTranslateFromCustomTotigerFormatServer) Recv() (*TrCustomMessageTotigerC2FormatMessageResponse, error) {
	m := new(TrCustomMessageTotigerC2FormatMessageResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TranslationContainer_TranslateFromtigerToCustomFormat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranslationContainerServer).TranslateFromtigerToCustomFormat(&translationContainerTranslateFromtigerToCustomFormatServer{stream})
}

type TranslationContainer_TranslateFromtigerToCustomFormatServer interface {
	Send(*TrtigerC2ToCustomMessageFormatMessage) error
	Recv() (*TrtigerC2ToCustomMessageFormatMessageResponse, error)
	grpc.ServerStream
}

type translationContainerTranslateFromtigerToCustomFormatServer struct {
	grpc.ServerStream
}

func (x *translationContainerTranslateFromtigerToCustomFormatServer) Send(m *TrtigerC2ToCustomMessageFormatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *translationContainerTranslateFromtigerToCustomFormatServer) Recv() (*TrtigerC2ToCustomMessageFormatMessageResponse, error) {
	m := new(TrtigerC2ToCustomMessageFormatMessageResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TranslationContainer_GenerateEncryptionKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranslationContainerServer).GenerateEncryptionKeys(&translationContainerGenerateEncryptionKeysServer{stream})
}

type TranslationContainer_GenerateEncryptionKeysServer interface {
	Send(*TrGenerateEncryptionKeysMessage) error
	Recv() (*TrGenerateEncryptionKeysMessageResponse, error)
	grpc.ServerStream
}

type translationContainerGenerateEncryptionKeysServer struct {
	grpc.ServerStream
}

func (x *translationContainerGenerateEncryptionKeysServer) Send(m *TrGenerateEncryptionKeysMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *translationContainerGenerateEncryptionKeysServer) Recv() (*TrGenerateEncryptionKeysMessageResponse, error) {
	m := new(TrGenerateEncryptionKeysMessageResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranslationContainer_ServiceDesc is the grpc.ServiceDesc for TranslationContainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslationContainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "translationContainerServices.TranslationContainer",
	HandlerType: (*TranslationContainerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TranslateFromCustomTotigerFormat",
			Handler:       _TranslationContainer_TranslateFromCustomTotigerFormat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TranslateFromtigerToCustomFormat",
			Handler:       _TranslationContainer_TranslateFromtigerToCustomFormat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GenerateEncryptionKeys",
			Handler:       _TranslationContainer_GenerateEncryptionKeys_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "translationContainerGRPC.proto",
}
